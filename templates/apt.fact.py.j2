#!/usr/bin/env python3

import json
import os
import re
import subprocess
import sys

content={
  'reboot_required': None,
  'update_last_success': None,
  'packages_updates' : [],
  'packages_dist_updates' : [],
  'packages_security_updates': [],
  'packages_security_dist_updates': [],
  'updates' : None,
  'dist_updates' : None,
  'security_updates': None,
  'security_dist_updates': None
}

# Regexp that match package names
reg_debian_package_name = re.compile('^Inst\s(?P<name>[a-zA-Z0-9_\.-]+)\s')

# Regexp that match security package name
reg_debian_security_update = re.compile('|'.join([
    '\sDebian[^\s]+-updates\s',
    '\sDebian-Security:',
    '\sUbuntu[^\s]+-security\s',
    '\sgNewSense[^\s]+-security\s'
]))


def is_exe(fpath):
    """Test if the given file exist and is executable
    """
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

def setUpgradablesPackages(cmd, update_regexp, security_update_regexp=None, key='updates'):
    """Compute upgradable package for the given distribution
    """
    if not is_exe(cmd[0]):
        content['error'] = cmd[0] + ' not available'
        return
    try:
{% if apt__use_cached_updates_list|bool %}
        update_file_name = '{{ apt__cached_updates_file }}' if key == 'updates' else '{{ apt__cached_dist_updates_file }}'
        with open(update_file_name, 'r') as f:
            content['packages_'+key] = map(lambda s:s.strip(), f.readlines())
        security_update_file_name = '{{ apt__cached_security_updates_file }}' if key == 'updates' else '{{ apt__cached_security_dist_updates_file }}'
        with open(security_update_file_name, 'r') as f:
            content['packages_security_'+key] = map(lambda s:s.strip(), f.readlines())
{% else %}
        with open(os.devnull, 'w') as devnull:
            result = subprocess.check_output(cmd, stderr=devnull)
        for line in result.splitlines():
        match = update_regexp.match(line)
        if match:
            content['packages_'+key].append(match.group('name'))
            if security_update_regexp and security_update_regexp.search(line):
                content['packages_security_'+key].append(match.group('name'))
{% endif %}
    except (subprocess.CalledProcessError,IOError) as e:
        content['error'] = str(e)
        return

    # Compute some another stats on lists
    content[key] = len(content['packages_'+key])
    content['security_'+key] = len(content['packages_security_'+key])
    if content[key] > 0:
        content['has_'+key] = True
    else:
        content['has_'+key] = False


if __name__ == '__main__':
    # DEBIAN SPECIFIC
    # REBOOT
    if os.path.isfile('/var/run/reboot-required'):
        content['reboot_required'] = True
    else:
        content['reboot_required'] = False
    # LAST UPDATE SUCCESS
    if os.path.isfile('{{ apt__update_stamp_file }}'):
        content['update_last_success'] = os.stat('{{ apt__update_stamp_file }}').st_mtime
    else:
        content['update_last_success'] = -1
    # UPDATES
    setUpgradablesPackages(['/usr/bin/apt-get', '--just-print', '--option', 'Debug::NoLocking=true', 'upgrade',  '--assume-no'],
                            reg_debian_package_name,
                            reg_debian_security_update)
    # DIST UPDATES
    setUpgradablesPackages(['/usr/bin/apt-get', '--just-print', '--option', 'Debug::NoLocking=true', 'dist-upgrade',  '--assume-no'],
                            reg_debian_package_name,
                            reg_debian_security_update,
                            'dist_updates')

    print(json.dumps(content))
    sys.exit(0)
