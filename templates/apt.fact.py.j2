#!/usr/bin/env python3

import json
import os
import re
import subprocess
import sys

content={
  'reboot_required': None,
  'update_last_success': None,
  'packages_updates' : [],
  'packages_dist_updates' : [],
  'packages_security_updates': [],
  'packages_security_dist_updates': [],
  'updates' : None,
  'dist_updates' : None,
  'security_updates': None,
  'security_dist_updates': None
}

# Regexp that match package names
reg_debian_package_name = re.compile('^Inst\s(?P<name>[a-zA-Z0-9_\.-]+)\s')

# Regexp that match security package name
reg_debian_security_update = re.compile('|'.join([
    '\sDebian[^\s]+-updates\s',
    '\sDebian-Security:',
    '\sUbuntu[^\s]+-security\s',
    '\sgNewSense[^\s]+-security\s'
]))

def getFileLines(path):
    """Open a file and return its lines

    Args:
        path: the file path
    Returns:
        the file content as lines array
    """
    if not os.path.isfile(path):
        content['error'] = '{} file not available'.format(path)
        return []
    try:
        with open(path, 'r') as f:
            return list(map(lambda s:s.strip(), f.readlines()))
    except IOError as e:
        content['error'] = str(e)
        return []

def getSubprocessLines(cmd):
    """Execute the given command and return output as lines array

    Args:
        cmd: the argv
    Returns:
        output as list of string
    """
    if not (os.path.isfile(cmd[0]) and os.access(cmd[0], os.X_OK)):
        content['error'] = '{} command not available'.format(cmd[0])
        return []
    try:
        with open(os.devnull, 'w') as devnull:
            result = subprocess.check_output(cmd, stderr=devnull)
    except subprocess.CalledProcessError as e:
        content['error'] = str(e)
        return []
    return list(map(lambda s:s.strip(), result.splitlines()))

def setUpgradablesPackages(cmd, update_regexp, security_update_regexp=None, key='updates'):
    """Compute upgradable package for the given distribution
    """
{% if apt__use_cached_updates_list|bool %}
    update_file_name = '{{ apt__cached_updates_file }}' if key == 'updates' else '{{ apt__cached_dist_updates_file }}'
    content['packages_'+key] = getFileLines(update_file_name)

    security_update_file_name = '{{ apt__cached_security_updates_file }}' if key == 'updates' else '{{ apt__cached_security_dist_updates_file }}'
    content['packages_security_'+key] = getFileLines(security_update_file_name)
{% else %}
    for line in getSubprocessLines(cmd):
        match = update_regexp.match(line)
        if match:
            content['packages_'+key].append(match.group('name'))
            if security_update_regexp and security_update_regexp.search(line):
                content['packages_security_'+key].append(match.group('name'))
{% endif %}

    # Compute some another stats on lists
    content[key] = len(content['packages_'+key])
    content['security_'+key] = len(content['packages_security_'+key])
    if content[key] > 0:
        content['has_'+key] = True
    else:
        content['has_'+key] = False


if __name__ == '__main__':
    # DEBIAN SPECIFIC
    # REBOOT
    if os.path.isfile('/var/run/reboot-required'):
        content['reboot_required'] = True
    else:
        content['reboot_required'] = False
    # LAST UPDATE SUCCESS
    if os.path.isfile('{{ apt__update_stamp_file }}'):
        content['update_last_success'] = os.stat('{{ apt__update_stamp_file }}').st_mtime
    else:
        content['update_last_success'] = -1
    # UPDATES
    setUpgradablesPackages(['/usr/bin/apt-get', '--just-print', '--option', 'Debug::NoLocking=true', 'upgrade',  '--assume-no'],
                            reg_debian_package_name,
                            reg_debian_security_update)
    # DIST UPDATES
    setUpgradablesPackages(['/usr/bin/apt-get', '--just-print', '--option', 'Debug::NoLocking=true', 'dist-upgrade',  '--assume-no'],
                            reg_debian_package_name,
                            reg_debian_security_update,
                            'dist_updates')

    print(json.dumps(content))
    sys.exit(0)
